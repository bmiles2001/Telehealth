
<div class="scheduler">

	<SchedulerToolbar CssClass="pb-1" @bind-Date="@Date" />

	<SchedulerBase Appointments="@Appointments"
				   BusinessHours="@BusinessHours"
				   CssClass="@CssClass"
				   Providers="@Providers"
				   @bind-Date="@Date"
				   @bind-ViewType:get="@ViewType"
				   @bind-VisibleProviders="@VisibleProviders" />

</div>

<ContentPlaceholder SectionName="@Schedule.ProviderContentPlaceholder">
	<ProviderDropdown CssClass="w-75"
					  Providers="@Providers"
					  SelectedProviders="@VisibleProviders"
					  SelectedProvidersChanged="@OnVisibleProvidersChanged"
					  ShowSelectedValues
					  TextFieldName="@Schedule.ProviderTextFieldName"
					  ValueFieldName="@Schedule.ProviderTextFieldName" />
</ContentPlaceholder>
@code {

	[Parameter] public required IEnumerable<Schedule.AppointmentDetails> Appointments { get; set; }
	[Parameter] public string? CssClass { get; set; }
	[Parameter] public required Location.OperatingHours BusinessHours { get; set; }
	[Parameter] public required DateTime Date { get; set; } = DateTime.Today;
	[Parameter] public EventCallback<DateTime> DateChanged { get; set; }
	[Parameter] public SchedulerViewType ViewType { get; set; }
	[Parameter] public EventCallback<SchedulerViewType> ViewTypeChanged { get; set; }
	[Parameter] public required IEnumerable<Schedule.ProviderDetails> Providers { get; set; } = [];
	[Parameter] public required IEnumerable<Schedule.ProviderDetails> VisibleProviders { get; set; } = [];
	[Parameter] public EventCallback<IEnumerable<Schedule.ProviderDetails>> VisibleProvidersChanged { get; set; }

	public async Task OnVisibleProvidersChanged(IEnumerable<Schedule.ProviderDetails> changedProviders)
	{
		if (VisibleProvidersChanged.HasDelegate)
		{
			await VisibleProvidersChanged.InvokeAsync(changedProviders);
			StateHasChanged();
		}
	}
}
